import re

def add_exploit_query_item(search_queries_set, item_type, name, version=None, cves=None):
    """
    Adds formatted search queries to the provided set based on item details.
    """
    query_base = ""
    # Clean name/version slightly for search terms
    clean_name = re.sub(r'[^\w\s.-]', '', str(name)) if name else ''
    clean_version = re.sub(r'[^\w\d.-]', '', str(version)) if version else ''

    if clean_name:
        query_base = f"{item_type} {clean_name}"
        if clean_version: query_base += f" {clean_version}"
        search_queries_set.add(query_base.strip())
    if cves:
        for cve in cves:
            if isinstance(cve, str) and re.match(r"CVE-\d{4}-\d{4,7}", cve, re.IGNORECASE):
                search_queries_set.add(cve.upper())

def build_search_queries(state):
    """
    Builds a list of search queries based on findings from other modules.
    """
    search_queries = set() # Use a set to avoid duplicate queries initially

    # From WPScan
    wps_data = state.get_module_findings("wpscan_results", {}).get("data")
    if wps_data:
        if wps_data.get("version"):
            vulns = wps_data.get("version", {}).get("vulnerabilities", [])
            cves = [ref for v in vulns for r_type, refs in v.get("references", {}).items() if r_type == "cve" for ref in refs]
            add_exploit_query_item(search_queries, "WordPress Core", wps_data.get("version",{}).get("number"), cves=cves)
        if wps_data.get("main_theme"):
            vulns = wps_data.get("main_theme", {}).get("vulnerabilities", [])
            cves = [ref for v in vulns for r_type, refs in v.get("references", {}).items() if r_type == "cve" for ref in refs]
            add_exploit_query_item(search_queries, "WordPress Theme", wps_data.get("main_theme",{}).get("slug"), wps_data.get("main_theme",{}).get("version",{}).get("number"), cves=cves)
        if wps_data.get("plugins"):
            for slug, p_info in wps_data.get("plugins", {}).items():
                vulns = p_info.get("vulnerabilities", [])
                cves = [ref for v in vulns for r_type, refs in v.get("references", {}).items() if r_type == "cve" for ref in refs]
                add_exploit_query_item(search_queries, "WordPress Plugin", slug, p_info.get("version",{}).get("number"), cves=cves)

    # From Nuclei
    nuclei_findings = state.get_module_findings("nuclei_results", {}).get("findings", [])
    for finding in nuclei_findings:
        info = finding.get("info", {}); cve_ids_raw = info.get("cve-id")
        if cve_ids_raw:
            cves_to_add = cve_ids_raw if isinstance(cve_ids_raw, list) else [cve_ids_raw]
            add_exploit_query_item(search_queries, "CVE", "", cves=cves_to_add) # Pass the set directly

        template_id = finding.get("template-id", "")
        template_name = info.get("name", "")
        # Avoid overly generic template IDs unless specifically configured
        if template_id and not any(kw in template_id for kw in ["generic-", "-detect", "-version", "http-missing", "exposed-", "default-credentials", "tech-detect", "info-leak", "misconfig", "http-request", "favicon"]):
            add_exploit_query_item(search_queries, "Vulnerability Pattern", template_id)
        elif template_name and any(prod in template_name.lower() for prod in ['apache', 'nginx', 'php', 'mysql', 'joomla', 'drupal', 'tomcat', 'iis']):
             add_exploit_query_item(search_queries, "Software Component", template_name)

    return sorted(list(search_queries))
