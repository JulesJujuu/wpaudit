import json
import re
import os
from core.tool_runner import run_command
from core.utils import get_scan_filename_prefix, sanitize_filename

def search_searchsploit(state, config, query, base_scan_prefix_for_log):
    """
    Runs SearchSploit for a given query and parses the results.
    Returns a list of found exploits and a list of manual commands.
    """
    print(f"      Running SearchSploit for '{query}'...")
    found_ss_exploits = []
    manual_cmds = []

    searchsploit_timeout = config.get("searchsploit_timeout", 30)
    searchsploit_console_log = os.path.join(
        config.get("output_dir", "."),
        "tool_logs",
        f"{os.path.basename(base_scan_prefix_for_log)}_searchsploit_{sanitize_filename(query)}.log"
    )
    os.makedirs(os.path.dirname(searchsploit_console_log), exist_ok=True)

    try:
        cmd_ss = ["searchsploit", "-j", "--disable-colour"]
        is_cve = query.upper().startswith("CVE-")
        if is_cve:
            cmd_ss.append("--cve")
        cmd_ss.append(query)

        process_ss_obj = run_command(
            cmd_ss, "SearchSploit", config,
            timeout=searchsploit_timeout,
            return_proc=True,
            log_file_path=searchsploit_console_log
        )

        if process_ss_obj and hasattr(process_ss_obj, 'returncode') and process_ss_obj.returncode == 0:
            json_output_to_parse = ""
            if os.path.exists(searchsploit_console_log):
                with open(searchsploit_console_log, 'r', errors='ignore') as f_log_ss:
                    content = f_log_ss.read()
                    json_match = re.search(r'^\s*(\{.*\}|\[.*\])\s*$', content, re.DOTALL | re.MULTILINE)
                    if json_match:
                        json_output_to_parse = json_match.group(1)
                    else:
                        print(f"      [?] SearchSploit: Could not isolate JSON block in log '{searchsploit_console_log}'. Attempting to parse whole file.")
                        json_output_to_parse = content
            
            if json_output_to_parse.strip():
                try:
                    ss_data = json.loads(json_output_to_parse)
                    ss_results = ss_data.get("RESULTS_EXPLOIT", [])
                    if not ss_results and isinstance(ss_data, list): # Handle if output is just a list
                        ss_results = ss_data

                    for exploit in ss_results:
                        edb_id = exploit.get("EDB-ID")
                        exploit_info = {
                            "title": exploit.get("Title"), "path": exploit.get("Path"),
                            "EDB-ID": edb_id, "type": exploit.get("Type"),
                            "platform": exploit.get("Platform")
                        }
                        found_ss_exploits.append(exploit_info)
                        if edb_id:
                            manual_cmd_str = f"searchsploit -m {edb_id}"
                            print(f"        -> Found EDB-ID {edb_id}: '{exploit.get('Title')}'. Manual command: {manual_cmd_str}")
                            manual_cmds.append({
                                "query": query, "EDB-ID": edb_id,
                                "title": exploit.get("Title"), "command": manual_cmd_str
                            })
                    
                    if found_ss_exploits:
                        print(f"      [+] SearchSploit: Found {len(found_ss_exploits)} results.")
                    else:
                        print(f"      [-] SearchSploit: No results found for '{query}' in parsed JSON.")

                except json.JSONDecodeError as e:
                    print(f"      [-] SearchSploit: JSON decode error for '{query}' from log '{searchsploit_console_log}'. Error: {e}. Content snippet: {json_output_to_parse[:200]}")
            elif process_ss_obj.returncode == 0:
                 print(f"      [-] SearchSploit: No results found for '{query}' (log empty or no JSON).")
        elif process_ss_obj and hasattr(process_ss_obj, 'returncode'):
             print(f"      [-] SearchSploit command failed for '{query}'. RC: {process_ss_obj.returncode}. Log: {searchsploit_console_log}")
        else:
             print(f"      [-] SearchSploit execution failed to start for '{query}'. Log: {searchsploit_console_log if os.path.exists(searchsploit_console_log) else 'not created'}")

    except Exception as e:
        print(f"      [-] SearchSploit: General error processing for '{query}': {e}")
        state.add_tool_error(f"Searchsploit Error for query '{query}': {e}")

    return found_ss_exploits, manual_cmds
